======= ChargingPile.ts =======



export enum ChargingPileStatus {
    running = "RUNNING",
    shutdown = "SHUTDOWN",
    unavailable = "UNAVAILABLE",
}

const chargingPileSchema = new mongoose.Schema({
    chargingPileId: {
        type: String,
        required: true,
    }, // should be ABCDE
    chargingPower: {
        type: Number,
        required: true,
    },
    chargingType: {
        type: String,
        required: true,
    },
    maxQueue: {
        type: Number,
        required: true,
    },
    queue: [
        {
            requestId: {
                type: String,
                ref: "ChargingRequest",
            },
        },
    ],
    status: {
        type: String,
        enum: Object.values(ChargingPileStatus),
        required: true,
    },
});




======= ChargingPileStats.ts =======



const chargingPileStatsSchema = new mongoose.Schema({
    chargingPileId: {
        type: String,
        ref: "ChargingPile",
        required: true,
        unique: true,
    },
    totalChargingSessions: {
        type: Number,
        default: 0,
    },
    totalChargingDuration: {
        type: Number,
        default: 0,
    },
    totalChargingVolume: {
        type: Number,
        default: 0,
    },
    totalChargingFee: {
        type: Number,
        default: 0,
    },
    totalServiceFee: {
        type: Number,
        default: 0,
    },
    totalFee: {
        type: Number,
        default: 0,
    },
});




======= ChargingQueue.ts =======

const chargingQueueSchema = new mongoose.Schema({
    userId: {
        type: Number,
        ref: "Users",
        justOne: true,
        required: true,
    },
    requestId: {
        type: String,
        ref: "ChargingRequests",
        justOne: true,
        required: true,
    },
    queueNumber: {
        type: Number,
        required: true,
    },
    requestType: {
        type: String,
        required: true,
    },
    requestTime: {
        type: Date,
        required: true,
    },
    requestVolume: {
        type: Number,
        required: true,
    },
});



======= ChargingRecord.ts =======

/**
 * ChargingRecord表
 * 存储充电记录信息
 * 
 * 充电记录ID
 * 用户ID
 * 充电桩ID
 * 充电开始时间
 * 充电结束时间
 * 充电电量
 * 充电费用
 * 服务费用
 * 总费用
 */

const chargingRecordSchema = new mongoose.Schema({
    recordId: { type: String, required: true },
    userId: { type: Number, required: true },
    chargingPileId: { type: String, required: true },
    startTime: { type: Date, required: true },
    endTime: { type: Date, required: true },
    volume: { type: Number, required: true },
    chargingFee: { type: Number, required: true },
    serviceFee: { type: Number, required: true },
    totalFee: { type: Number, required: true },
    requestId:{type: String, required: true},
});


======= ChargingRequest.ts =======



export enum ChargingRequestStatus {
    pending = "pending",
    dispatched = "dispatched",
    charging = "charging",
    finished = "finished",
    canceled = "canceled",
}

const chargingRequestSchema = new mongoose.Schema({
    requestId: {
        type: String,
        unique: true,
        required: true,
    },
    userId: {
        type: Number,
        required: true,
    },
    requestTime: {
        type: Date,
        required: true,
    },
    requestMode: {
        type: String,
        required: true,
    },
    requestVolume: {
        type: Number,
        required: true,
    },
    batteryAmount: {
        type: Number,
        required: true,
    },
    startTime: {
        type: Date,
        required: false,
    },
    status: {
        type: String,
        enum: Object.values(ChargingRequestStatus),
        required: true,
    },
    recordId:{
        type: String,
        required: false,
    }
});


======= ChargingStats.ts =======
/**
 * 存储充电站的统计数据
 * 包括统计ID
 * 时间（日、周、月）
 * 充电桩ID
 * 累计充电次数
 * 累计充电时长
* 累计充电量 
 * 累计充电费用
 * 累计服务费用
 * 累计总费用等；
 */
const chargingStatsSchema = new mongoose.Schema({
    statsId: { type: Number, required: true },
    time: { type: Date, required: true },
    chargingPileId: { type: String, required: true },
    chargingTimes: { type: Number, required: true },
    chargingDuration: { type: Number, required: true },
    chargingVolume: { type: Number, required: true },
    chargingFee: { type: Number, required: true },
    serviceFee: { type: Number, required: true },
    totalFee: { type: Number, required: true },
});



======= FaultRecord.ts =======
import mongoose from 'mongoose'
const faultRecordSchema = new mongoose.Schema({
    recordId: String,
    chargingPileId: String,
    faultTime: Date,
    solveTime: Date,
});
faultRecordSchema.virtual("chargingPile", {
    ref: "ChargingPile",
    localField: "chargingPileId",
    foreignField: "chargingPileId",
});
export default mongoose.model('FaultRecords', faultRecordSchema)


======= User.ts =======
// const mongoose = require("mongoose");


const userSchema = new mongoose.Schema({
    userId: {
        type: Number,
        unique: true,
    },
    username: {
        type: String,
        unique: true,
        required: true,
    },
    password: {
        type: String,
        required: true,
    },
    phoneNumber: String,
    isAdmin: {
        type: Boolean,
        default: false,
    },
});
