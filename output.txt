======= ChargingPile.ts =======
import mongoose from 'mongoose'
const chargingPileSchema = new mongoose.Schema({
chargingPileId: Number,
chargingPower: Number,
chargingType: String,
queueLength: Number
});

// auto increment chargingPileId
chargingPileSchema.pre("save", function (next) {
    const doc = this;
    // Find the highest chargingPileId in the collection
    // and increment it by 1 for the new chargingPile
    const ChargingPile = mongoose.model("ChargingPile", chargingPileSchema);
    ChargingPile.find()
        .sort({ chargingPileId: -1 })
        .limit(1)
        .exec()
        .then((result) => {
            doc.chargingPileId = result.length > 0 ? result[0].chargingPileId + 1 : 1;
            next(); // Call the next middleware
        })
        .catch((err) => next(err));
});

// chargingPileSchema.virtual("chargingRecords", {
//     ref: "ChargingRecord",
//     localField: "chargingPileId",
//     foreignField: "chargingPileId",
// });


export default mongoose.model('ChargingPiles', chargingPileSchema)

======= ChargingQueue.ts =======
import mongoose from "mongoose";
const chargingQueueSchema = new mongoose.Schema({
    userId: Number,
    queueNumber: Number,
    requestType: String,
    requestTime: Date,
    chargingAmount: Number,
});

chargingQueueSchema.virtual("user", {
    ref: "Users",
    localField: "userId",
    foreignField: "userId",
    justOne: true,
});
// chargingQueueSchema.virtual("chargingPile", {
//     ref: "ChargingPile",
//     localField: "queueNumber",
//     foreignField: "queueLength",
//     justOne: true,
// });
export default mongoose.model("ChargingQueues", chargingQueueSchema);


======= ChargingRecord.ts =======
import mongoose from 'mongoose'
const chargingRecordSchema = new mongoose.Schema({
recordId: String,
userId: String,
chargingPileId: String,
startTime: Date,
endTime: Date,
volume: Number,
chargingFee: Number,
serviceFee: Number,
totalFee: Number
});
chargingRecordSchema.virtual("user", {
    ref: "User",
    localField: "userId",
    foreignField: "userId",
    justOne: true,
});
export default mongoose.model('ChargingRecords', chargingRecordSchema)

======= ChargingRequest.ts =======
import mongoose from "mongoose";
const chargingRequestSchema = new mongoose.Schema({
    requestId: { type: String, unique: true },
    userId: String,
    requestTime: Date,
    requestMode: String,
    requestVolume: Number,
});

// chargingRequestSchema.virtual("queue", {
//     ref: "ChargingQueue",
//     localField: "requestId",
//     foreignField: "queueNumber",
//     justOne: true,
// });

export default mongoose.model("ChargingRequests", chargingRequestSchema);


======= ChargingStats.ts =======
import mongoose from 'mongoose'
const chargingStatsSchema = new mongoose.Schema({
    statsId: String,
    time: Date,
    chargingPileId: String,
    chargingTimes: Number,
    chargingDuration: Number,
    chargingVolume: Number,
    chargingFee: Number,
    serviceFee: Number,
    totalFee: Number,
});

chargingStatsSchema.virtual("chargingPile", {
    ref: "ChargingPile",
    localField: "chargingPileId",
    foreignField: "chargingPileId",
    justOne: true,
});
export default mongoose.model('ChargingStats', chargingStatsSchema)


======= FaultRecord.ts =======
import mongoose from 'mongoose'
const faultRecordSchema = new mongoose.Schema({
    recordId: String,
    chargingPileId: String,
    faultTime: Date,
    solveTime: Date,
});
faultRecordSchema.virtual("chargingPile", {
    ref: "ChargingPile",
    localField: "chargingPileId",
    foreignField: "chargingPileId",
});
export default mongoose.model('FaultRecords', faultRecordSchema)


======= User.ts =======
// const mongoose = require("mongoose");
import mongoose from "mongoose";

const userSchema = new mongoose.Schema({
    userId: {
        type: Number,
        unique: true,
    },
    username: {
        type: String,
        unique: true,
        required: true,
    },
    password: {
        type: String,
        required: true,
    },
    phoneNumber: String,
    isAdmin: {
        type: Boolean,
        default: false,
    },
});

userSchema.pre("save", function (next) {
    const doc = this;
    // Find the highest userId in the collection
    // and increment it by 1 for the new user
    const User = mongoose.model("User", userSchema);
    User.find()
        .sort({ userId: -1 })
        .limit(1)
        .exec()
        .then((result) => {
            doc.userId = result.length > 0 ? result[0].userId + 1 : 1;
            next(); // Call the next middleware
        })
        .catch((err) => next(err));
});

userSchema.virtual("requests", {
    ref: "ChargingRequest",
    localField: "userId",
    foreignField: "userId",
});


export default mongoose.model("Users", userSchema);


